---

- name: Check if MySQL is already installed.
  stat: 
    path: /etc/init.d/mysql
  register: mysql_installed

- name: SQL install
  block: 
  - name: Add repository
    block:
    - name: Add apt key for MariaDB
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: F1656F24C74CD1D8
        
    - name: Add apt repo for MariaDB
      apt_repository:
        repo: deb [arch=amd64] http://mariadb.nethub.com.hk/repo/{{ mariadb_version }}/debian buster main
        filename: mysql80
        state: present

  - name: Install MariaDB Server
    apt:
      name: mariadb-server
      state: present
      update_cache: yes
  when: mysql_installed != true
  # end SQL install block

- name: Install/Update python db manager
  apt:
    pkg:
      - python-pymysql
    update_cache: yes
    state: latest

- name: Save mysql root password credentials to /root/.my.cnf
  become: yes
  template: 
    src: root.my.cnf.j2 
    dest: /root/.my.cnf 
    owner: root 
    mode: 0600
    backup: yes

- name: Ensure mysql is running and starts on boot
  service:
    name: mysql
    state: started
    enabled: yes
  become: yes

- name: my.cnf configuration
  template:
    src: my.j2
    dest: "{{ mysql_config_file }}"
    owner: root
    group: root
    mode: 0400
    force: true
  notify: restart mysql

- name: remove old configs
  file:
    path: "{{ item }}"
    state: absent
  loop: "{{ to_remove_conf }}"

- name: Get list of hosts for the anonymous user.
  command: mysql -NBe 'SELECT Host FROM mysql.user WHERE User = ""'
  register: mysql_anonymous_hosts
  changed_when: false
  check_mode: no

- name: Remove anonymous MySQL users.
  mysql_user:
      name: ""
      host: "{{ item }}"
      state: absent
  with_items: "{{ mysql_anonymous_hosts.stdout_lines|default([]) }}"

- name: Remove the test database
  mysql_db:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: test
    state: absent

- name: Root User Creation
  mysql_user: 
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: "{{ mysql_root_user }}"
    host: "{%if app_env == 'dev'%}%{%else%}{{ mysql_host }}{%endif%}"
    password: "{{ mysql_root_password }}"
    priv: "*.*:ALL,GRANT"
    append_privs: true
    state: present
  when: mysql_root_password is defined
      and mysql_root_password|trim != ''

- name: "{{ projectname }} user add"
  mysql_user: 
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: "{{ mysql_user }}"
    config_file: "{{ mysql_confdir }}"
    host: "{%if app_env == 'prod' %}{{ mysql_host }}{% else %}%{% endif %}"
    password: "{{ mysql_pw }}"
    priv: "*.*:ALL,GRANT"
    append_privs: true
    state: present

- name: Database creation
  mysql_db:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: "{{ mysql_db }}"
    collation: utf8_general_ci
    encoding: utf8
    state: present

- name: Cron dumping db
  block:
  - name: log file
    file:
      path: "{{ cron_sql_log }}"
      state: directory

  - name: folder
    file:
      path: "{{ cron_workspace }}"
      state: directory
      owner: root
      mode: 755

  - name: dump script
    template:
      src: cron.sh
      dest: "{{ cron_workspace }}/cron.sh"
      owner: root
      group: crontab
      mode: 0550

  - name: Dump database
    become: yes
    cron:
      name: "dump database"
      minute: "0"
      hour: "6"
      job: "{{ cron_workspace }}/cron.sh > {{ cron_sql_log }}"  

  - name: Clear all dumps
    become: yes
    cron:
      name: "clear all dump script"
      minute: "59"
      hour: "23"
      job: "rm -rf {{ cron_workspace }}/{{ projectname }}*"

  - name: import remote db
    shell: "/bin/bash {{ cron_workspace }}/cron.sh"
    register: db_exist
