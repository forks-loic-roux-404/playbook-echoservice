---
- set_fact:
    app_secret: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"

- name: Unmount directory
  mount:
    path: "{{ web_dir }}"
    state: unmounted

- name: Prepare fresh directory
  become: yes
  file:
    path: "{{ dir }}"
    state: absent

- name: Correct permissions
  file:
    dest: "{{ data_dir }}"
    owner: "{{ web_owner }}"
    group: "{{ web_group }}"
    state: directory
    mode: "{{ web_chmod }}"
    recurse: yes

- name: Clone the code repository to the docroot.
  git:
    repo: "{{ src_repo }}"
    dest: "{{ dir }}"
    version: "{{ src_branch }}"
  become_user: "{{ web_owner }}"

- name: Generate config files
  become: yes
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ web_owner }}"
    group: "{{ web_group }}"
  with_items:
    - { src: parameters.yaml, dest: "{{ web_dir }}/config/parameters.yaml" }
    - { src: phpunit.xml, dest: "{{ web_dir }}/phpunit.xml" }

- name: sf aliases
  blockinfile:
    dest: "/home/vagrant/.bash_aliases"
    block: "{{ lookup('template', 'aliases') }}"
  when: app_env == 'dev'

# Symfony 5
- name: Init symfony5 project
  composer:
    command: install
    working_dir: "{{ web_dir }}"
    no_dev: "{{ no_dev }}"
  environment:
    APP_ENV: "{{ app_env }}"
  become_user: vagrant
  register: new_symfony_project

- name: clean
  file:
    path: "{{ item.path }}"
    state: absent
  loop:
    - { path: .env }
    - { path: .env.test }
    - { path: "{{ dir }}/.git" }

- name: project scss with make commands
  make:
      chdir: "{{ dir }}"
      target: "{{ item }}"
  with_items: "{{ init_make_commands }}"
  when: init_make_commands is defined
    and init_make_commands|trim != ''

- name: project scss with symfony console commands
  command: "{{ sf_console }} {{ item }}"
  become_user: "{{ web_owner }}"
  with_items: "{{ init_sf_commands }}"
  ignore_errors: yes
  when: init_sf_commands is defined
      and init_sf_commands|trim != ''

- name: php unit execution right
  file:
    dest: "{{ phpunit_path }}"
    owner: "{{ web_owner }}"
    group: "{{ web_group }}"
    mode: "{{ phpunit_chmod }}"

- name: Install phpunit
  command: "php {{ phpunit_path }}"
  become_user: "{{ web_owner }}"
  when: app_env == 'dev' and phpunit_enable == true

- name: Copy new virtual hosts file.
  template:
    src: default.conf
    dest: "/etc/nginx/conf.d/default.conf"
  notify:
    - restart nginx

- name: Include cron config for project
  include_tasks: cron.yml
  when: app_env != 'prod' and enable_cron == true
